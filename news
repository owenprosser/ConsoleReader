#!/usr/bin/env python3
import sys, tempfile, os, requests, json, re, asyncio, aiohttp, signal, webbrowser, subprocess
import urllib.request
from urllib.parse import urlparse
from subprocess import call
from pick import Picker, pick
from bs4 import BeautifulSoup
from datetime import datetime, date
import calendar

class HackerNewsReader():
    def __init__(self):
        self.newsItems = []
        self.newsIDs = []
        self.noOfItems = 30
        self.browsedPosition = -1
        self.SortOptions = {"top":"topstories","new":"newstories","best":"beststories"}
        self.CurrentSortOption = self.SortOptions["top"]
        self.CurrentSortOptionString = "Top Stories"

    def PopulateArticlesList(self):
        requestString = 'https://hacker-news.firebaseio.com/v0/'+self.CurrentSortOption+'.json'
        r = requests.get(requestString)
        self.newsIDs = json.loads(r.text)

    def PopulateNewsItems(self, startIndex):
        if(startIndex+self.noOfItems+1 > 500):
            startIndex = (500-self.noOfItems+1)

        IDlist = self.newsIDs[startIndex:startIndex+self.noOfItems+1]
        self.newsItems = []
        urls = []
        for id in IDlist:
            requestString = 'https://hacker-news.firebaseio.com/v0/item/'+str(id)+'.json'
            urls.append(requestString)
        client = HttpClient()
        data = asyncio.run(client.main(urls))

        for item in data:
            tempDict = dict()
            if "url" in item:
                tempDict.update({"id":item["id"], "title":item["title"], "url":item["url"]})
                self.newsItems.append(tempDict)

        tempDict.update({"id":0000, "title":"    More: (" + str(startIndex+1+self.noOfItems) +"-"+str(startIndex+(self.noOfItems*2))+")", "url":"http://owenprosser.com"})
        self.browsedPosition = startIndex

    def Menu(self):
        selected = None
        position = 0
        while True:
            if(position != self.browsedPosition):
                self.PopulateNewsItems(position)

            titleList = self.CreateTitle(self.newsItems)

            now = datetime.now()
            dayName = calendar.day_name[date.today().weekday()]
            day = now.day
            if 4 <= day <= 20 or 24 <= day <= 30:
                suffix = "th"
            else:
                suffix = ["st", "nd", "rd"][day % 10 - 1]

            title = "news.ycombinator.com - " + self.CurrentSortOptionString + " - " + dayName + " "+ now.strftime("%d"+suffix) + now.strftime(" of %B %Y %H:%M")

            menu = Picker(titleList, title)
            menu.register_custom_handler(ord('o'),  self.OpenInBrowserInvoke)
            menu.indicator = ">"
            selected = menu.start()
            selectedUrl = self.newsItems[selected[1]]['url']

            if(selected[1] != len(titleList)-1):
                self.OpenTextInEditor(self.GetHtmlContent(selectedUrl))
            else:
                position += self.noOfItems

    def OpenInBrowserInvoke(self, picker):
        url = self.newsItems[picker.index]["url"];
        self.OpenInBrowser(url)
        return None, 0

    def OpenInBrowser(self, url):
        if sys.platform == 'darwin':    # in case of OS X
            subprocess.Popen(['open', url])
        else:
            webbrowser.open_new_tab(url)
        self.OpenLinkInBrowser = False

    def GetHtmlContent(self, url):
        text = ""
        uf = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
        html = uf.content
        soup = BeautifulSoup(html, "lxml")

        for hit in soup.findAll(['h1', 'p']):
            hit = hit.text.strip()
            text += "\n\n" + hit

        return text

    def OpenTextInEditor(self, text):
        EDITOR = os.environ.get('EDITOR','vim')
        message = text.encode()
        with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
            tf.write(message)
            tf.flush()
            call([EDITOR, tf.name])

            # do the parsing with `tf` using regular File operations.
            # for instance:
            tf.seek(0)

    def CreateTitle(self, newsItems):
        count = self.browsedPosition+1
        titleList = []
        for item in newsItems:
            if(newsItems.index(item) != len(newsItems)-1):
                if(len(str(count)) == 1):
                    titleList.append(" " + str(count) + ". " + item["title"] + " (" + urlparse(item["url"]).netloc + ")")
                else:
                    titleList.append(str(count) + ". " + item["title"] + " (" + urlparse(item["url"]).netloc + ")")
                count+=1
            else:
                titleList.append(item["title"])
        return titleList

class HttpClient():
    def __init__(self):
        self.url = "https://hacker-news.firebaseio.com/v0/item/"
        self.end = ".json"
        self.data = []

    async def get(self, url, session):
        try:
            async with session.get(url=url) as response:
                resp = await response.read()
                self.data.append(json.loads(resp))
        except Exception as e:
            print("Unable to get url {} due to {}.".format(url, e.__class__))


    async def main(self, urls):
        async with aiohttp.ClientSession() as session:
            ret = await asyncio.gather(*[self.get(url, session) for url in urls])
        return self.data

def signal_handler(sig, frame):
    sys.exit(0)

def PrintHelp():
    print("usage: \tSort Options:\n\t[top]\t# Top Stories\n\t[new]\t# New Stories\n\t[best]\t# Best Stories\n\n\tKeys: \n\t{Enter} # Read Story \n\t{o}     # Open in browser")
    quit()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    reader = HackerNewsReader()

    if(len(sys.argv) < 3):
        if(len(sys.argv) > 1):
            if(str.lower(sys.argv[1]) == "top"):
                reader.CurrentSortOption = reader.SortOptions["top"]
            elif(str.lower(sys.argv[1]) == "best"):
                reader.CurrentSortOption = reader.SortOptions["best"]
                reader.CurrentSortOptionString = "Best Stories"
            elif(str.lower(sys.argv[1]) == "new"):
                reader.CurrentSortOption = reader.SortOptions["new"]
                reader.CurrentSortOptionString = "New Stories"
            else:
                PrintHelp()

        reader.PopulateArticlesList()

        print(chr(27) + "[2J")#Clear console

        reader.Menu()
    else:
        print("Too many Args")
        PrintHelp()