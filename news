#!/usr/bin/env python3
import sys, tempfile, os, requests, json
from subprocess import call
from pick import pick

class HackerNewsReader():
    def __init__(self):
        self.newsItems = []
        self.newsIDs = []
        self.noOfItems = 1

    def PopulateArticlesList(self):
        r = requests.get('https://hacker-news.firebaseio.com//v0/topstories.json')
        self.newsIDs = json.loads(r.text)

    def PopulateNewsItems(self):
        self.newsIDs = self.newsIDs[:self.noOfItems]

        for id in self.newsIDs:
            requestString = 'https://hacker-news.firebaseio.com/v0/item/'+str(id)+'.json'
            r = requests.get(requestString)
            if(r.status_code == 200):
                result = json.loads(r.text)
                tempdict = dict()
                tempdict.update({'id':result["id"],'url':result['url'],'title':result["title"]})
                self.newsItems.append(tempdict)


    def Menu(self):
        for i in self.newsItems:
            print(i["title"])
            input()

        #selected = pick(items, "Menu:", indicator='==>')
        #self.OpenTextInEditor(selected[0][0])

    def OpenTextInEditor(self, text):
        EDITOR = os.environ.get('EDITOR','vim')
        message = text.encode()
        with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
            tf.write(message)
            tf.flush()
            call([EDITOR, tf.name])

            # do the parsing with `tf` using regular File operations.
            # for instance:
            tf.seek(0)

if __name__ == "__main__":
    reader = HackerNewsReader()
    reader.PopulateArticlesList()
    reader.PopulateNewsItems()
    reader.Menu()