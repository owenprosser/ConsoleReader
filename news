#!/usr/bin/env python3
import sys, tempfile, os, requests, json, re
import urllib.request
from subprocess import call
from pick import pick
from bs4 import BeautifulSoup
import signal

class HackerNewsReader():
    def __init__(self):
        self.newsItems = []
        self.newsIDs = []
        self.noOfItems = 5

    def PopulateArticlesList(self):
        r = requests.get('https://hacker-news.firebaseio.com//v0/topstories.json')
        self.newsIDs = json.loads(r.text)

    def PopulateNewsItems(self):
        self.newsIDs = self.newsIDs[:self.noOfItems]

        for id in self.newsIDs:
            requestString = 'https://hacker-news.firebaseio.com/v0/item/'+str(id)+'.json'
            r = requests.get(requestString)
            if(r.status_code == 200):
                result = json.loads(r.text)
                tempdict = dict()
                tempdict.update({'id':result["id"],'url':result['url'],'title':result["title"]})
                self.newsItems.append(tempdict)

    def Menu(self):
        while True:
            titleList = []
            for i in self.newsItems:
                titleList.append(i["title"])

            selected = pick(titleList, "Menu:", indicator='>')
            selectedUrl = self.newsItems[selected[1]]['url']
            self.OpenTextInEditor(self.GetHtmlContent(selectedUrl))

    def GetHtmlContent(self, url):
        text = ""
        uf = urllib.request.urlopen(url)
        html = uf.read()
        soup = BeautifulSoup(html, "lxml")

        for hit in soup.findAll(['h1', 'p']):
            hit = hit.text.strip()
            text += "\n\n" + hit

        return text

    def OpenTextInEditor(self, text):
        EDITOR = os.environ.get('EDITOR','vim')
        message = text.encode()
        with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
            tf.write(message)
            tf.flush()
            call([EDITOR, tf.name])

            # do the parsing with `tf` using regular File operations.
            # for instance:
            tf.seek(0)

def signal_handler(sig, frame):
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    reader = HackerNewsReader()
    reader.PopulateArticlesList()
    reader.PopulateNewsItems()
    reader.Menu()